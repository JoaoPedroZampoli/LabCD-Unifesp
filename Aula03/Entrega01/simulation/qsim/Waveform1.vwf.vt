// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/16/2025 13:49:24"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          DecodificadorI
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DecodificadorI_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] X;
reg [2:0] Y;
// wires                                               
wire [2:0] S0;
wire [2:0] S1;
wire [2:0] S2;
wire [2:0] S3;
wire [2:0] S4;
wire [2:0] S5;
wire [2:0] S6;

// assign statements (if any)                          
DecodificadorI i1 (
// port map - connection between master ports and signals/registers   
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.S4(S4),
	.S5(S5),
	.S6(S6),
	.X(X),
	.Y(Y)
);
initial 
begin 
#80000 $finish;
end 
// X[ 2 ]
always
begin
	X[2] = 1'b0;
	X[2] = #20000 1'b1;
	#20000;
end 
// X[ 1 ]
always
begin
	X[1] = 1'b0;
	X[1] = #10000 1'b1;
	#10000;
end 
// X[ 0 ]
always
begin
	X[0] = 1'b0;
	X[0] = #5000 1'b1;
	#5000;
end 
// Y[ 2 ]
initial
begin
	Y[2] = 1'b0;
end 
// Y[ 1 ]
initial
begin
	Y[1] = 1'b0;
end 
// Y[ 0 ]
always
begin
	Y[0] = 1'b0;
	Y[0] = #40000 1'b1;
	#40000;
end 
endmodule

